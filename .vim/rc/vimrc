if &compatible
  set nocompatible
endif

filetype off
filetype plugin indent off

let s:is_windows = has('win32') || has('win64') || has('win95')
let s:is_unix = has('unix')
let s:is_daxue_PC = exists('g:daxue_PC') && g:daxue_PC != 0

function! IsWindows() abort
  return s:is_windows
endfunction

function! IsUnix() abort
  return s:is_unix
endfunction

function! IsDaxuePC() abort
  return s:is_daxue_PC
endfunction

"s:source_rc {{{
function! s:source_rc(path, ...) abort
  let use_global = get(a:000, 0, !has('vim_starting'))
  let abspath = resolve(expand('~/.vim/rc/' . a:path))
  if !use_global
    execute 'source' fnameescape(abspath)
    return
  endif

  " substitute all 'set' to 'setglobal'
  let content = map(readfile(abspath),
        \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
  " create tempfile and source the tempfile
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute 'source' fnameescape(tempfile)
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction"}}}

if has('vim_starting')
  call s:source_rc('init.rc.vim')
endif

call s:source_rc('dein.rc.vim')

call s:source_rc('plugins.rc.vim')

if has('vim_starting')
  call vimrc#on_filetype()
endif

if !has('vim_starting')
  call dein#call_hook('source')
  call dein#call_hook('post_source')

  syntax enable
  filetype plugin indent on
endif

call s:source_rc('encoding.rc.vim')

call s:source_rc('search.rc.vim')

call s:source_rc('edit.rc.vim')

call s:source_rc('view.rc.vim')

call s:source_rc('keymap.rc.vim')

set secure

"vim: foldmethod=marker
"vim: foldlevel=0
