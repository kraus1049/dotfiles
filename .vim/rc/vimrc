" if &compatible
"   set nocompatible
" endif

filetype off
filetype plugin indent off

let s:is_windows = has('win32') || has('win64') || has('win95')
let s:is_unix = has('unix')
let s:is_daxue_PC = exists('g:daxue_PC') && g:daxue_PC != 0

function! IsWindows() abort
  return s:is_windows
endfunction

function! IsUnix() abort
  return s:is_unix
endfunction

function! IsDaxuePC() abort
  return s:is_daxue_PC
endfunction


" PATHの自動更新関数
" | 指定された path が $PATH に存在せず、ディレクトリとして存在している場合
" | のみ $PATH に加える
function! IncludePath(path)
  " define delimiter depends on platform
  if IsWindows()
    let delimiter = ";"
  else
    let delimiter = ":"
  endif
  let pathlist = split($PATH, delimiter)
  if isdirectory(a:path) && index(pathlist, a:path) == -1
    let $PATH=a:path.delimiter.$PATH
  endif
endfunction

" ~/.pyenv/shims を $PATH に追加する
" これを行わないとpythonが正しく検索されない
call IncludePath(expand("~/.pyenv/shims"))

" set pyxversion=3

"s:source_rc {{{
function! s:source_rc(path, ...) abort
  let l:use_global = get(a:000, 0, !has('vim_starting'))
  let l:abspath = resolve(expand('~/.vim/rc/' . a:path))
  if !l:use_global
    execute 'source' fnameescape(l:abspath)
    return
  endif

  " substitute all 'set' to 'setglobal'
  let l:content = map(readfile(l:abspath),
        \ 'substitute(v:val, ''^\\W*\\zsset\\ze\\W'', ''setglobal'', '''')')
" \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
  " create tempfile and source the tempfile
  let l:tempfile = tempname()
  try
    call writefile(l:content, l:tempfile)
    execute 'source' fnameescape(l:tempfile)
  finally
    if filereadable(l:tempfile)
      call delete(l:tempfile)
    endif
  endtry
endfunction"}}}

if has('vim_starting')
  call s:source_rc('init.rc.vim')
endif

call s:source_rc('dein.rc.vim')

call s:source_rc('plugins.rc.vim')

if has('vim_starting')
  call vimrc#on_filetype()
endif

if !has('vim_starting')
  call dein#call_hook('source')
  call dein#call_hook('post_source')

endif

call s:source_rc('encoding.rc.vim')

call s:source_rc('search.rc.vim')

call s:source_rc('edit.rc.vim')

call s:source_rc('view.rc.vim')

call s:source_rc('keymap.rc.vim')

set secure

"vim: foldmethod=marker
"vim: foldlevel=0
