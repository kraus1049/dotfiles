# Denite {{{

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim','neoyank.vim','cpsm']
hook_source = 'source ~/.vim/rc/plugins/denite.vim'
hook_add = '''
	if v:version >= 800 && has('python3')
		nnoremap [Denite] <Nop>
		nmap <Space>u [Denite]
		nnoremap [Denite]u :<C-u>Denite<Space>
		nnoremap [Denite]m :<C-u>Denite file_mru <CR>
		nnoremap [Denite]o :<C-u>Denite outline <CR>
		nnoremap [Denite]f :<C-u>Denite file_rec <CR>
		nnoremap [Denite]b :<C-u>Denite buffer <CR>
		nnoremap [Denite]h :<C-u>Denite help <CR>
		nnoremap [Denite]l :<C-u>Denite line <CR>
		nnoremap [Denite]q :<C-u>Denite quickfix <CR>
		nnoremap [Denite]d :<C-u>Denite directory_rec <CR>

		nnoremap <silent> [Denite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>

		" Denite grep検索結果を再表示する
		nnoremap <silent> [Denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
		" resumeした検索結果の次の行の結果へ飛ぶ
		nnoremap <silent> [Denite]n :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
		" resumeした検索結果の前の行の結果へ飛ぶ
		nnoremap <silent> [Denite]p :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
			endif
'''
if = 'v:version >= 800 && has("python3")'

[[plugins]]
repo = 'Shougo/neomru.vim'
hook_source = '''
  let g:neomrm#follow_links = 1
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim','neoyank.vim','vimproc.vim']
hook_source = 'source ~/.vim/rc/plugins/unite.rc.vim'
hook_add = '''
	if !(v:version >= 800 && has('python3'))
		nnoremap [unite] <Nop>
		nmap <Space>u [unite]
		nnoremap [unite]u :<C-u>Unite<Space>
		nnoremap [unite]m :<C-u>Unite file_mru<CR>
		nnoremap [unite]o :<C-u>Unite outline<CR>
		nnoremap [unite]f :<C-u>Unite file<CR>
		nnoremap [unite]b :<C-u>Unite buffer<CR>
		nnoremap [unite]h :<C-u>Unite help<CR>
		nnoremap [unite]l :<C-u>Unite line<CR>
		nnoremap [unite]q :<C-u>Unite quickfix<CR>
	endif
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Shougo/unite-help'
on_source = ['denite.nvim']

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = ['denite.nvim']

[[plugins]]
repo = 'chemzqm/unite-location'
on_source = ['denite.nvim']

[[plugins]]
repo = 'junegunn/vim-emoji'
on_source = ['vim-denite-emoji.nvim']

[[plugins]]
repo = 'pocari/vim-denite-emoji'
on_source = ['denite.nvim']
#}}}

#VimFiler {{{
[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_source = 'source ~/.vim/rc/plugins/vimFiler.rc.vim'
hook_add = '''
  noremap [VimFiler] <Nop>
  map <Space>f [VimFiler]
  noremap <silent> [VimFiler]f :<C-u>VimFiler<CR>
  noremap <silent> [VimFiler]s :<C-u>VimFilerBufferDir -split -simple  -winwidth=35 -no-quit<CR>
  noremap <silent> [VimFiler]d :<C-u>VimFilerDouble<CR>
  noremap <silent> [VimFiler]t :<C-u>VimFilerTab<CR>
'''
#}}}

#Tex {{{
[[plugins]]
repo = 'lervag/vimtex'
hook_source = 'source ~/.vim/rc/plugins/vimtex.rc.vim'
on_ft = ['plaintex','tex']
#}}}

#caw.vim {{{
[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nv = '<Plug>'}
hook_source = 'source ~/.vim/rc/plugins/caw.rc.vim'
hook_add = '''
nmap <C-J> <Plug>(caw:hatpos:toggle)
vmap <C-J> <Plug>(caw:hatpos:toggle)
'''
on_map = '<Plug>'
# #}}}

# neovim {{{
[[plugins]]
repo = 'roxma/nvim-yarp'
hook_add = '''
  let g:python3_host_prog = expand('$HOME/.pyenv/shims/python')
'''
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
#}}}

# LSP {{{
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = ['deoplete.nvim','fzf']
rev = 'next'
build = 'bash install.sh'
hook_add = '''
	set hidden
	let g:LanguageClient_serverCommands = {
		\ 'rust' : ['rustup', 'run', 'nightly', 'rls'],
		\ 'python' : ['~/.pyenv/shims/pyls'],
		\ 'ruby' : ['solargraph', 'stdio'],
		\ 'c': ['clangd-6.0', '-compile-commands-dir=' . getcwd() . '/build'],
		\ 'cpp': ['clangd-6.0', '-compile-commands-dir=' . getcwd() . '/build'],
		\ 'haskell' : ['hie-wrapper']
		\}

	let g:LanguageClient_autoStart = 1

	nnoremap [LSP] <Nop>
	nmap <Space>l [LSP]
	nnoremap [LSP]m :call LanguageClient_contextMenu()<CR>
	nnoremap [LSP]h :call LanguageClient_textDocument_hover()<CR>
	nnoremap [LSP]d :call LanguageClient_textDocument_definition()<CR>
	nnoremap [LSP]r :call LanguageClient_textDocument_rename()<CR>

'''
on_ft = ['python','rust','ruby','c','cpp','haskell']

[[plugins]]
repo = 'junegunn/fzf'

# }}}

# python tools {{{

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
#depends = ['deoplete-jedi']
on_ft = ['python']

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

[[plugins]]
repo = 'hdima/python-syntax'
on_ft = ['python']
hook_add = '''
	let g:python_highlight_all = 1
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

# }}}

# deoplete {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['nvim-yarp','vim-hug-neovim-rpc','context_filetype.vim']
hook_add = 'source ~/.vim/rc/plugins/deoplete.rc.vim'
hook_source = '''
	source ~/.vim/rc/plugins/deoplete-source.rc.vim
'''
if = "has('python3') && v:version >= 800"
on_i = 1
on_ft = ['python','tex']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['vim-snippets','neosnippet-snippets', 'context_filetype.vim']
on_source = ['deoplete.nvim']
on_ft = 'snippet'
hook_source = 'source ~/.vim/rc/plugins/neosnippet.rc.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'ujihisa/neco-look'
on_ft = ['text','tex','git','gitcommit','markdown']

[[plugins]]
repo = 'Shougo/neco-syntax'
on_source =['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_source =['deoplete.nvim']

[[plugins]]
repo = 'hrsh7th/vim-neco-calc'
on_source =['deoplete.nvim']
#}}}

# markdown {{{
[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'
# }}}

#toml tool {{{
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
#}}}

# others {{{
[[plugins]]
repo = 'lilydjwg/fcitx.vim'
if = 'has("python3") && !exists("g:WSL_linux")'
on_i = 1

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {n = '<Plug>',x = '<Plug>'}
on_i = 1
hook_add = '''
  xmap <CR> <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
#}}}

# rust{{{
[[plugins]]
repo = 'rust-lang/rust.vim'
hook_source = 'source ~/.vim/rc/plugins/rust.rc.vim'
on_ft = 'rust'
# }}}

# Haskell {{{


[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = ['haskell']

#}}}


# elixir {{{
[[plugins]]
repo = 'elixir-lang/vim-elixir'
on_ft = ['elixir']
#}}}

# lightline {{{
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['tagbar','vim-fugitive','vim-gitgutter','vim-anzu']
hook_source = 'source ~/.vim/rc/plugins/lightline.rc.vim'
# setfiletype hogeするとステータスバーが真っ黒になる謎の現象の対処策
# 本来は元を叩くべきだけどこんだけプラグイン多いと原因がわかんね〜
# neocompleteを消すと上手くいく...。
hook_post_source = '''
 augroup MyAutoCmd
   autocmd FileType * call lightline#colorscheme()
 augroup END
'''
on_i = 1

[[plugins]]
repo = 'majutsushi/tagbar'
hook_source = 'source ~/.vim/rc/plugins/tagbar.rc.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_cmd = ['GitGutter', 'GitGutterAll', 'GitGutterDisable', 'write' ,'edit']
hook_source = 'source ~/.vim/rc/plugins/vim-gitgutter.rc.vim'
on_map = {n = '<Plug>'}

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = ['Gw', 'Gblame', 'Gbrowse', 'Gcommit', 'Gdiff', 'Gedit','Git','']
on_ft = ['c', 'cpp', 'vim','python', 'ruby', 'haskell', 'java','tex','go']
on_map = {n = '<Plug>'}
hook_add = '''
	noremap [fugitive] <Nop>
	nmap <Space>g [fugitive]
	nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
	nnoremap <silent> [fugitive]a :Gwrite<CR>
	nnoremap <silent> [fugitive]c :Gcommit-v<CR>
	nnoremap <silent> [fugitive]b :Gblame<CR>
	nnoremap <silent> [fugitive]d :Gdiff<CR>
	nnoremap <silent> [fugitive]m :Gmerge<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = {n = '<Plug>'}
#}}}
# vim: foldmethod=marker filetype=toml
